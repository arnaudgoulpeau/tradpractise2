security:
    encoders:
      # use your user class name here
      App\Entity\User:
        # Use native password encoder
        # This value auto-selects the best possible hashing algorithm
        # (i.e. Sodium when available).
        algorithm: sha1
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
      users:
        entity:
          class: 'App\Entity\User'
          property: 'username'
    firewalls:
        api:
          pattern: ^/api/
          stateless: true
          anonymous: true
          guard:
            authenticators:
              - lexik_jwt_authentication.jwt_token_authenticator
        main:
            pattern: ^/
            anonymous: true
            json_login:
              check_path: /authentication_token
              username_path: username
              password_path: password
              success_handler: lexik_jwt_authentication.handler.authentication_success
              failure_handler: lexik_jwt_authentication.handler.authentication_failure
            guard:
                authenticators:
                    - App\Security\AppAdminAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
        dev:
          pattern: ^/(_(profiler|wdt)|css|images|js)/
          security: false
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/(login$), roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/(admin), roles: ROLE_USER }
        - { path: ^/(api), roles: ROLE_USER }

        # - { path: ^/profile, roles: ROLE_USER }
